<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>封装驱动函数</title>
      <link href="/2023/03/27/%E5%B0%81%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2023/03/27/%E5%B0%81%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>模块化编程：提取驱动函数，封装在.c和.h文件<br>在工程文件夹新建Hardware存放硬件驱动，回到KILL，点击三个箱子的图标，新建组Groups叫Hardware,再点击魔术棒按钮，选择C/C++,点击三个点的按钮，把新建的Hardware文件夹添加到头文件路径。<br>Hardware右键新建.C和.H文件叫LED，点击三个点按钮添加路径<br><img src="/img/19.jpg"><br>.H用来存放这个驱动程序可以对外提供的函数或者变量声明。第一行添加一个防止头文件重复包含的代码（格式固定）假如没有定义，就定义，最后和if呼应，注意！这个要以空行结尾<br><img src="/img/21.jpg"><br>.C第一行添加32的头文件，首先写初始化LED，里面就是写打开时钟，配置端口初始化这些东东<br><img src="/img/20.jpg"><br>在最后面加上GPIO_SetBits(GPIO_Pin_1 | GPIO_Pin_2<br>);这样不操作LED则LED是熄灭的。若不加这句则LED默认低电平会亮。<br>以后直接调用LED_Init(void)这个函数就好了，因为要被外部引用，所以将void LED_Init(void)赋值到.h文件中，别忘记加分号。这样就是对模块外部声明，这个函数是可以被外部调用的函数<br>在main.c文件中加入#include”LED.h”，之后在main里面直接打上LED_Iint();就可完成LED初始化<br><img src="/img/24.jpg"><br><img src="/img/23.jpg"><br>杂七杂八：读取按键上拉输入。uint8_t就是unsigned char的意思。按键delay20ms消抖。循环之前先初始化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数模论文</title>
      <link href="/2023/03/24/shumo%20lunwen/"/>
      <url>/2023/03/24/shumo%20lunwen/</url>
      
        <content type="html"><![CDATA[<p>标题：基于XX模型的XX问题研究<br>模型就是正文里面的核心模型；XX问题就是赛题的中心词；不要使用修饰词<br>避免出现公式、非公知公用的缩写，字数在一行内<br>eg:基于单目标化模型的CT系统成像问题研究；基于差分方程和原包自动机的交通阻塞问题研究<br>摘要：重中之重！！！<br>基本要求：对论文概括，读完知道问题，建立的模型和求解结果<br>注意：不要加图或者表格，控制在四分之三到一页，字数800-1100<br><img src="/img/12.jpg"><br><img src="/img/13.jpg"><br><img src="/img/14.jpg"><br><img src="/img/15.jpg"><br><img src="/img/16.jpg"><br>参考文献：<br>按照规范列出并标注，参考文献不用自己写，知网搜索文献之后点最右侧引用导出，复制粘贴即可，用第一个就好了；按正文次序修改标号，添加角标在字体那里有个上标，若用到博客等网站的文章可以借鉴，绝对不要照抄！！<br>公式编辑：<br>1、Word自带公式编辑（适合小白）；顶部功能区：插入-公式，或者快捷键：ALT和=<br>Mathpix:可截图得到公式<br>2、免费公式编号：<br><img src="/img/17.jpg"><br>若要复制当时公式右键保留原格式，然后删掉当时公式再写后面你想要的公式，自动编号<br>三线表：三条线的表，第一行上面下面和最下面有线，标题放上面且带序号，采用“插入题注”，表的序号会自动更新<br><img src="/img/18.jpg"><br>如果线要加粗，选择标题行，中间的线才能变粗，一般一磅就好了，设置一次之后后面的表格都是三线表<br>图片绘制：<br>基本要求：展示思路，表现结果，标题在下岗，且有编号，无首行缩进，居中对齐<br>作图软件：PPT excle echarts（免费）<br>流程图，思路图：展示对问题的分析、模型或者算法的思路<br>注意：不用为了作图而作图，不同曲线颜色设置不一样，带图例，整体背景白底黑线<br>物理示意图：一般不必要，不会画就算了<br>地理空间图：涉及空间分布<br>分页符：摘要自己一页，插入分页。我们用不到分节符！！<br>PS:准备参加数学建模的、初看视频建议：<br>1、学习算法的过程，只要明白算法的优缺点，适用范围，知道每种算法到底可以干嘛就好了、怎么用编程实现就好了。<br>2、可以看一些案例，了解解题思路，看到某题就立马能想到用哪种方法，这对于参加建模竞赛来说是非常关键的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学建模比赛前东东</title>
      <link href="/2023/03/23/shumo%20competition%20preparation/"/>
      <url>/2023/03/23/shumo%20competition%20preparation/</url>
      
        <content type="html"><![CDATA[<p>赛题特点：<br><img src="/img/11.jpg"></p><p>资料查找：<br>1.Github这是Github上一个很厉害的中国博主整理的数据集，包括农业、建筑、生物、化学等等几乎所有领域，科研和竞赛人员的宝藏网站，使用也非常方便。<a href="https://github.com/awesomedata/awesome-public-datasets%E7%82%B9%E5%87%BB%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E9%A2%86%E5%9F%9F%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%BC%B9%E5%87%BA%E6%9D%A5%E5%BE%88%E5%A4%9A%E7%9B%B8%E5%85%B3%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9C%80%E6%B1%82%E5%8E%BB%E9%80%89%E6%8B%A9">https://github.com/awesomedata/awesome-public-datasets点击自己想要的领域，就会弹出来很多相关的数据连接，根据自己的需求去选择</a><br>2. Gapminder这个网站可以做数据可视化，他也是收集了很多数据集，包括上百种关于世界经济、人口、环境、健康等公共指标的历史数据，都是按照国家和年份整理的面板数据。缺点就是这个网站不太稳定，科学上网<a href="https://www.gapminder.org/data/">https://www.gapminder.org/data/</a><br>3.国家统计数据可以查看中国各领域宏观数据集<a href="https://data.stats.gov.cn/easyq">https://data.stats.gov.cn/easyq</a><br>   ps：做好的图表可以直接截图放论文里不算抄袭<br><img src="/img/44.jpg"><br><img src="/img/55.jpg"></p><p>选题：<br><img src="/img/22.jpg"><br><img src="/img/33.jpg"></p><p>数据预处理：<br><img src="/img/66.jpg"><br><img src="/img/77.jpg"></p><p>数学建模论文的结构：<br>一份完整的答卷应包含以下内容:<br>    论文题目；<br>    摘要；<br>    问题的重述；<br>    模型的假设、符号约定和名词解释；<br>    模型的建立、模型的求解、模型的结果和检验；<br>    模型的评价和改进；<br>    参考文献；<br>    附录。<br>论文题目：<br>要能反映出该论文的实质, 简单明了、字数不宜过多。</p><p>1．摘 要<br>一般为200～400 字；<br>其内容主要包括建模思想、模型特点、求解方法、主要结果等,其既要概括全文, 又要反映出本队的特点；<br>竞赛数学建模的论文摘要极为重要, 它是评委们首先看到的, 如果摘要写不好, 即使下面的内容写的再好也可能被提前淘汰。<br>摘要应具有独立性和自含性, 即只阅读摘要, 不阅读论文全文,就能获得必要的信息。摘要中要有数据、有结论, 是一篇完整的短文, 可以独立使用, 可以引用, 可以用于工艺推广。摘要的内容应包含与论文同等量的主要信息, 可供读者确定有无必要阅读全文, 也可供文摘等二次文献选用。摘要一般应说明研究工作的目的、实验方法, 结果和最终结论等,论文研究问题，用了什么方法，结果是什么。 重点是结果和结论。”对于大学生数学建模竞赛来讲, 由于是对同一个问题给出的解答, 为了使评阅人较快弄清作者的思路, 我们认为摘要还是尽可能详细一些为好。特别是应写清条件、结论、基本过程、关键步骤、要领、所采用的方法以及有哪些特色等。<br>注意:<br>( 1) 控制好论文摘要的字数, 一般应在400 字左右。<br>( 2) 摘要应包括: a.数学模型的归类( 在数学上属于什么类型) ;b.所用的数学知识、建模的思想、算法思想、模型及算法特点; c.主要结果( 数值结果, 结论, 回答题目所问的全部“问题”)<br>( 3) 摘要表述要准确、简明、条理清晰、合乎语法。<br>( 4)摘要中不应引用正文中的结果, 也不应有所引用的参考文献出现, 一般也不应有第一人称的语句出现.</p><p>2.问题的重述。重述是指对原问题的简要回顾, 并不太重要，不要复制粘贴避免查重。</p><p>3.假设。一要抓住实际问题的主要因素, 忽略次要因素, 为建立模型创造条件, 有时候, 假设是在建模的过程中才逐渐明确的；二要假设应当“ 合理”；三要假设确属“ 必要” ；四是原题中已给的假设, 一般不再写入。<br>关于假设，公式和叙述的简明性问题。数学建模的假设是否合理是全文清晰叙述的基础, 所以一定要经过反复斟酌、挑选, 将最重要、最基本的概念, 用清晰而严格的语言加以界定或描述。但不少论文中假设太多, 如有的论文模型假设条目达二十余条。还有些所作假设含义或界限不清, 这就使整篇论文不可能成为层次分明、叙述清楚的好文章。<br>数学建模论文应规范化, 符号、公式和文字说明都要求简练而又能说明问题。有些文章使用数学记号达二十多个, 而且符号前后也不统一。还有些论文中公式推导或表述过于繁冗, 使人难以判断其正确性。有些文章, 所给出的数学模型只是一些数学表达式的罗列而缺乏必要的文字说明, 基本步骤和主要的推导过程不清楚, 使人难以理解。<br>注意：<br>( 1) 根据题目中条件作出假设;<br>( 2) 根据题目中要求作出假设;<br>( 3) 关键性假设不能缺; 假设要切合题意、合理。<br>符号说明要注意整篇文章符号一致。</p><p>4.模型的建立。（一组公式和对每个变量的解释就是一个模型，看资料用自己的话复述一个简单模型，把题目中的变量带入模型中）<br><img src="/img/88.jpg"><br>一、要通过对问题的分析引出建模的思路; 通过主要的步骤导出所建的模型, 也就是要有建模的过程。<br>二、要建成的模型有完整的数学表述, 最好能在建成后集中写出来, 以免评阅者找来找去。<br>三、要注意有时建模是分阶段完成的, 即基础模型→中间模型→最终模型。<br>四、要注意有时所建的模型相当好, 只是求解困难, 这样的模型也要写出来。然后设法给出简化的模型以利求解。<br>五、要注意一个实际问题可以有多个模型, 但不要贪多求全, 抓一个或两个有代表性的或能反映本队特点的, 建好、解好就足够了。<br>六、要注意模型的建立与求解可以分开来写, 也可以合在一起写。即可以模型: 问题①, 问题②⋯⋯求解: 问题①, 问题②⋯⋯也可以问题①: 模型, 求解; 问题②: 模型, 求解⋯⋯<br>建立数学模型应注意以下几点：<br>( 1) 不是每一个小问都要建立一个模型，若只是增加了约束项，可以只建立一个模型，对模型进行改造<br>( 2) 抓住问题本质, 简化变量之间的关系。<br>( 3) 建立数学模型时要有严密的数学推理。<br>( 4) 用数学方法建模, 模型要明确, 要有数学表达式。<br><img src="/img/99.jpg"></p><p>5.模型的求解和结果。<br>一、要有算法的设计或选择, 给出算法的具体步骤或框图。<br>二、要注意计算机实现时, 如果是自己编程,程序不一定要打印在附录中, 如果是选用数学软件, 写出名称即可。<br>三、要注意在模型的建立和求解过程中, 可能有必要的数学命题, 如果是自己给出的命题,应当有证明; 如果是引用他人的命题, 应当注明出处( 并列入参考献) 。<br>四、要注意中间结果, 除非必不可少的, 一般不必写入答卷。<br>五、要注意最终结果至少要“ 答为所问”。<br>七、要注意有的赛题的最终结果可以甚至应当“ 超出”赛题的要求。<br>八、要注意结果的表述不仅有多样性( 公式、表格、图、文字等) , 也可有创造性</p><p>6.结果的分析和检验。<br>这是答卷中必须包含的一项内容, 例如误差分析, 稳定性分析等,检验不仅仅局限于数学领域, 更要检验在实际中是否“ 合理可行”, 这是数学建模的基本要求之一, 切不可忽视。<br>( 1) 对数值结果或模拟结果要进行必要的检验, 若结果不正确、不合理、或误差大时, 要分析原因, 对算法、计算方法、或模型进行修正、改进;<br>( 2) 必要时, 要对模型进行稳定性分析、统计检验、误差分析, 要对不同模型进行对比及实际可行性检验。</p><p>7.模型的评价和改进。应当根据所建模型的特点提出中肯的评价, 并提出切实可行的改进意见。总之, 要实话实说, 言之有物。<br>( 1) 优点突出, 缺点不回避。没有改进可不写，不是重点<br>( 2) 推广或改进方向<br>（3）结合文献分析正文中模型用常在什么方面，与本文所求解的问题有什么区别</p><p>8.参考文献。一般只列出几种主要的即可。</p><p>参考文献要书写规范, 可参考专业学术杂志。论文过程中参考了前人研究工作的成果, 就应该反映出来, 在论文主体中涉及有关内容, 要用上标的形式列出参考文献序号, 要注意参考文献尽量是少而精, 不要滥用, 罗列一大堆无关文献。</p><p>9.附录。视情况而定, 可有可无。<br>( 1) 计算程序、详细的结果, 详细的数据表格, 可在此列出。但不要错, 错的宁可不列<br>( 2) 主要结果数据, 应在正文中列出, 不怕重复。<br><img src="/img/101.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PID算法(一)</title>
      <link href="/2023/03/21/pid01/"/>
      <url>/2023/03/21/pid01/</url>
      
        <content type="html"><![CDATA[<h1 id="1、PID的概念"><a href="#1、PID的概念" class="headerlink" title="1、PID的概念"></a>1、PID的概念</h1><p>PID算法是工业应用中最广泛算法之一，在闭环系统的控制中，可自动对控制系统进行准确且迅速的校正。PID算法已经有100多年历史，在四轴飞行器，平衡小车、汽车定速巡航、温度控制器等场景均有应用。</p><p><strong>PID算法：就是“比例（proportional）、积分（integral）、微分（derivative）”，是一种常见的“保持稳定”控制算法。</strong></p><p>常规的模拟PID控制系统原理框图如下所示:</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213101736869.png" alt="image-20230213101736869"></p><p>因此可以得出e(t)和u(t)的关系：</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213101801907.png" alt="image-20230213101801907"></p><p>其中：</p><ul><li><p>Kp：比例增益，是调适参数；</p></li><li><p>Ki：积分增益，也是调适参数；</p></li><li><p>Kd：微分增益，也是调适参数；</p></li><li><p>e：误差=设定值（SP）- 回授值（PV）；</p></li><li><p>t：目前时间。</p></li></ul><p>数学公式可能比较枯燥，通过以下例子，了解PID算法的应用。</p><p>例如，使用控制器使一锅水的温度保持在50℃，小于50℃就让它加热，大于50度就断电不就行了？</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213102008694.png" alt="image-20230213102008694"></p><p>假如要求不搞的情况下可以这么做，但是要维持在50°C就比较困难，正如图中小人一样，只有低于50才加热，高于50就断开，那么温度就会在50上下来回震荡，很难接近50使之稳定。</p><p>设想一下，假如汽车的定速巡航电脑在某一时间测到车速是45km/h，它立刻命令发动机：加速！</p><p>结果，发动机那边突然来了个100%全油门，嗡的一下汽车急加速到了60km/h，这时电脑又发出命令：刹车！结果乘客吐……</p><p>所以，在大多数场合中，用“开关量”来控制一个物理量就显得比较简单粗暴了，有时候是无法保持稳定的，因为单片机、传感器不是无限快的，采集、控制需要时间。</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213102443083.png" alt="image-20230213102443083"></p><p><strong>（1）Kp比例增益</strong></p><p>Kp比例控制考虑当前误差，误差值和一个正值的常数Kp（表示比例）相乘。需要控制的量，比如水温，有它现在的<strong>当前值</strong>，也有我们期望的<strong>目标值</strong>。</p><ul><li><p>当两者差距不大时，就让加热器“轻轻地”加热一下。</p></li><li><p>要是因为某些原因，温度降低了很多，就让加热器“稍稍用力”加热一下。</p></li><li><p>要是当前温度比目标温度低得多，就让加热器“开足马力”加热，尽快让水温到达目标附近。</p></li></ul><p>通俗的来讲就是P就是响应速度，例如，当烧水的时候，一开始是20℃，要加热到90℃，这个时候误差e=70℃，那么就要加大火力去让温度上升，当温度到达65℃，误差e=5℃，这个时候就不用这么大火力去烧水。</p><p>实际写程序时，就让偏差（目标减去当前）与调节装置的“调节力度”，建立一个一次函数的关系，就可以实现最基本的“比例”控制了~</p><p>Kp越大，调节作用越激进，Kp调小会让调节作用更保守。</p><p>但是，这个也有缺点，若只用“比例控制”的话，那么就无时无刻都会有误差，当e=0的时候，系统就不再控制了，这样整个系统就会来回震荡。若你正在制作一个平衡车，有了P的作用，你会发现，平衡车在平衡角度附近来回“狂抖”，比较难稳住。</p><p><strong>（2）Kd微分增益</strong></p><p>Kd微分控制考虑将来误差，计算误差的一阶导，并和一个正值的常数Kd相乘。（看的是趋势，也就是<strong>误差之差</strong>）</p><p>有了P的作用，不难发现，只有P好像不能让平衡车站起来，水温也控制得晃晃悠悠，好像整个系统不是特别稳定，总是在“抖动”。</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213104225103.png" alt="image-20230213104225103"></p><p>设想有一个弹簧：现在在平衡位置上，拉它一下，然后松手，这时它会震荡起来，因为阻力很小，它可能会震荡很长时间，才会重新停在平衡位置。</p><p>请想象一下：要是把上图所示的系统浸没在水里，同样拉它一下 ：这种情况下，重新停在平衡位置的时间就短得多。</p><p>此时需要一个控制作用，让被控制的物理量的“变化速度”趋于0，即类似于“阻尼”的作用。</p><p>因为，当比较接近目标时，P的控制作用就比较小了，越接近目标，P的作用越温柔，有很多内在的或者外部的因素，使控制量发生小范围的摆动。</p><p>D的作用就是让物理量的速度趋于0，只要什么时候，这个量具有了速度，D就向相反的方向用力，尽力刹住这个变化。</p><p>Kd参数越大，向速度相反方向刹车的力道就越强，如果是平衡小车，加上P和D两种控制作用，如果参数调节合适，它应该可以站起来了。<br><strong>（3）Ki积分增益</strong></p><p>Ki积分控制考虑过去误差，将误差值过去一段时间和（误差和）乘以一个正值的常数Ki。</p><p>还是以热水为例，假如有个人把加热装置带到了非常冷的地方，开始烧水了，需要烧到50℃。</p><p>在P的作用下，水温慢慢升高，直到升高到45℃时，他发现了一个不好的事情：天气太冷，水散热的速度，和P控制的加热的速度相等了。</p><p><strong>这可怎么办？</strong></p><ul><li><p>P兄这样想：我和目标已经很近了，只需要轻轻加热就可以了。</p></li><li><p>D兄这样想：加热和散热相等，温度没有波动，我好像不用调整什么。</p></li><li><p>于是，水温永远地停留在45℃，永远到不了50℃。</p></li></ul><p>根据常识，我们知道，应该进一步增加加热的功率，可是增加多少该如何计算呢？</p><p>前辈科学家们想到的方法是真的巧妙，设置一个积分量，只要偏差存在，就不断地对偏差进行积分（累加），并反应在调节力度上。</p><p>这样一来，即使45℃和50℃相差不是太大，但是随着时间的推移，只要没达到目标温度，这个积分量就不断增加，系统就会慢慢意识到：还没有到达目标温度，该增加功率啦！</p><p>到了目标温度后，假设温度没有波动，积分值就不会再变动，这时，加热功率仍然等于散热功率，但是，温度是稳稳的50℃。</p><p>Ki的值越大，积分时乘的系数就越大，积分效果越明显，所以，I的作用就是，减小静态情况下的误差，让受控物理量尽可能接近目标值。</p><p><strong>I在使用时还有个问题：需要设定积分限制，防止在刚开始加热时，就把积分量积得太大，难以控制。</strong></p><h1 id="2、PID算法参数调试"><a href="#2、PID算法参数调试" class="headerlink" title="2、PID算法参数调试"></a>2、PID算法参数调试</h1><p>PID算法的参数调试是指通过调整控制参数（比例增益、积分增益/时间、微分增益/时间）<strong>让系统达到最佳的控制效果</strong>。</p><p>调试中稳定性（不会有发散性的震荡）是首要条件，此外，不同系统有不同的行为，不同的应用其需求也不同，而且这些需求还可能会互相冲突。</p><p><a href="https://rossning92.github.io/pid-simulation/">可以通过这个自己动手调节一下，看看结果如何🐧</a></p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105127774.png" alt="image-20230213105127774"></p><p>PID算法只有三个参数，在原理上容易说明，但PID算法参数调试是一个困难的工作，因为要符合一些特别的判据，而且PID控制有其限制存在。</p><p><strong>1、稳定性</strong></p><p>若PID算法控制器的参数未挑选妥当，其控制器输出可能是不稳定的，也就是其输出发散，过程中可能有震荡，也可能没有震荡，且其输出只受饱和或是机械损坏等原因所限制。不稳定一般是因为过大增益造成，特别是针对延迟时间很长的系统。</p><p>2、最佳性能</p><p>PID控制器的最佳性能可能和针对过程变化或是设定值变化有关，也会随应用而不同。</p><p>两个基本的需求是调整能力（regulation，干扰拒绝，使系统维持在设定值）及命令追随 （设定值变化下，控制器输出追随设定值的反应速度）。有关命令追随的一些判据包括有上升时间及整定时间。有些应用可能因为安全考量，不允许输出超过设定值，也有些应用要求在到达设定值过程中的能量可以最小化。</p><p><strong>3、各调试方法对比</strong></p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105526182.png" alt="image-20230213105526182"></p><p><strong>4、调整PID参数对系统的影响</strong> </p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105552097.png" alt="image-20230213105552097"></p><p><strong>参考资料：</strong></p><p><a href="https://blog.csdn.net/m0_38106923/article/details/109545445?ops_request_misc=&request_id=&biz_id=102&utm_term=pid&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-109545445.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&spm=1018.2226.3001.4187"> 一文搞懂PID控制算法</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDI4MDE5Ng==&mid=2247488157&idx=2&sn=3b214c5ee27da1a0075b51d886b9f580&chksm=ebbbbf76dccc36603e441e89aca2f61ad22858c49756e51c601d213acd4778c1ff5b2b56fb0f&scene=21#wechat_redirect">PID原理和参数调试</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDA2OTM4MA==&mid=2459414238&idx=1&sn=82feaac579b491942e487c2e0622d5c9&chksm=fcdd1ab5cbaa93a3d14f96c221cc6883f113c4954f40fd34284eae8cec1cc893d6d482f3c91f&mpshare=1&scene=1&srcid=0924twXOIV8SKMcwY97lY428&sharer_sharetime=1600949251548&sharer_shareid=4c58b3600d67a71ab64a1eeb5ac2a392&key=6de1ce3c70b324a40741efe7e69941de25bb83453933cba79214d7f9d0c3e7abe41ac09f158ce2d42ddfe68d2f092a502ddec3f9634d7ca431a9c752b49846e6b54d4c3f516389f7fc0517e5a70da30396d98774a5b367d067d5622975378dbcbd9bf2cdd993f9c95452e721690a0e80d12b426b5f2186a5bf9ff971a551917d&ascene=1&uin=MTg5Mzg2MjgyOA==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Aejrx9ckEPq6didl4xP09gA=&pass_ticket=d7pYWgu6Wqd0XTmEgAxex08gu2s/z09DL17Lrry7UfvPpjphxapcAp4zmziElkpo&wx_header=0">谁曾想，听了个故事秒懂了PID！</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPIO输入以及C语言</title>
      <link href="/2023/01/12/2023-3-20/"/>
      <url>/2023/01/12/2023-3-20/</url>
      
        <content type="html"><![CDATA[<p>按键抖动：过滤，加一段延时<br><img src="/img/u.jpg"><br>若遇到电路中一端接电路，另一端接地的电容，考虑滤波电容的作用，使电路稳定，在电路分析的时候可以遮掉<br>传感器：红外发射管和接收管可以做寻迹小车<br><img src="/img/v.jpg"><br>左上角第一个：按键按下，接地低电平，按键松开，悬空电压不稳定，加个上拉电阻，则稳定PA0高电平<br>第二个图外接上拉电阻：可以想象上拉电阻为一个弹簧按键松开上拉高电平 按键按下接GND为无穷大的力低电平。PA0可以控制为浮空或者上拉，两个上拉高电平稳定低电平损耗<br>第三个内接下拉：同理第四个了解即可<br>C语言<br>数据类型<br><img src="/img/w.jpg"><br>Char字符按道理应该存放字符，但是单片机中用来存放整数<br>宏定义“#define”<br>用途：用一个字符代替一个数字，将数据参数映射到一个字符串上，<br><img src="/img/x.jpg"><br>关键字Typedef:<br>用途，将较长的变量类型换个名字，便于使用<br><img src="/img/1.jpg"><br>两者区别：<br>宏定义新名字在左边，不用分号；任何名字都能换<br>typedef新名字在右边，要分号；只能专门给变量类型换名字<br>给变量类型重命名一般用typedef<br>结构体：struct<br>用途：数据打包，不同类型变量的合集<br><img src="/img/2.jpg"><br>地址指针加-&gt;结构体名字<br>用结构体变量的名字，用.来引出结构体成员<br><img src="/img/3.jpg"><br>若名字太长结构体不方便<br><img src="/img/4.jpg"><br>此时可以用typedef<br><img src="/img/5.jpg"><br>到时候要再定义那个结构体直接用StructName替换一长串即可<br>枚举：enum<br>用途：定义一个取值受限制的整型变量，用于限制变量取值范围<br>比如定义一个变量用来存储星期的值，理论上1-7，定义一个整型变量，那么这个变量去什么数都可以不受到限制，这个时候出现数据不合法如星期八，则可以用枚举<br>定义和应用：<br>{Monday=1,Tuesday=2，Wednesday=3}week;如果数按顺序累加赋值可省略{Monday=1,Tuesday，Wednesday}week;<br><img src="/img/6.jpg"><br><img src="/img/7.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OLED</title>
      <link href="/2023/01/12/OLED/"/>
      <url>/2023/01/12/OLED/</url>
      
        <content type="html"><![CDATA[<p>显示屏调试：显示屏连接单片机，调试信息显示在屏<br>OLED简介：</p><p><img src="/img/25.jpg"><br>驱动函数：<br>showchar（1,2，’a’)一行二列显示字符<br>以下同理，若四位参数则还有一个显示长度<br><img src="/img/26.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pilipala</title>
      <link href="/2023/01/12/pilipala/"/>
      <url>/2023/01/12/pilipala/</url>
      
        <content type="html"><![CDATA[<p>Today, my sister cooked a packet of turkey noodles, and I took a bite, which made me very hot.</p><p><img src="/img/f.jpg" alt="Duckling"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>happy day!</title>
      <link href="/2023/01/06/2023-1-16/"/>
      <url>/2023/01/06/2023-1-16/</url>
      
        <content type="html"><![CDATA[<h2 id="this-is-my-first-article"><a href="#this-is-my-first-article" class="headerlink" title="this is my first article"></a>this is my first article</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/04/hello-world/"/>
      <url>/2023/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
