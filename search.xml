<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PID算法(一)</title>
      <link href="/2023/03/21/pid01/"/>
      <url>/2023/03/21/pid01/</url>
      
        <content type="html"><![CDATA[<h1 id="1、PID的概念"><a href="#1、PID的概念" class="headerlink" title="1、PID的概念"></a>1、PID的概念</h1><p>PID算法是工业应用中最广泛算法之一，在闭环系统的控制中，可自动对控制系统进行准确且迅速的校正。PID算法已经有100多年历史，在四轴飞行器，平衡小车、汽车定速巡航、温度控制器等场景均有应用。</p><p><strong>PID算法：就是“比例（proportional）、积分（integral）、微分（derivative）”，是一种常见的“保持稳定”控制算法。</strong></p><p>常规的模拟PID控制系统原理框图如下所示:</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213101736869.png" alt="image-20230213101736869"></p><p>因此可以得出e(t)和u(t)的关系：</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213101801907.png" alt="image-20230213101801907"></p><p>其中：</p><ul><li><p>Kp：比例增益，是调适参数；</p></li><li><p>Ki：积分增益，也是调适参数；</p></li><li><p>Kd：微分增益，也是调适参数；</p></li><li><p>e：误差=设定值（SP）- 回授值（PV）；</p></li><li><p>t：目前时间。</p></li></ul><p>数学公式可能比较枯燥，通过以下例子，了解PID算法的应用。</p><p>例如，使用控制器使一锅水的温度保持在50℃，小于50℃就让它加热，大于50度就断电不就行了？</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213102008694.png" alt="image-20230213102008694"></p><p>假如要求不搞的情况下可以这么做，但是要维持在50°C就比较困难，正如图中小人一样，只有低于50才加热，高于50就断开，那么温度就会在50上下来回震荡，很难接近50使之稳定。</p><p>设想一下，假如汽车的定速巡航电脑在某一时间测到车速是45km/h，它立刻命令发动机：加速！</p><p>结果，发动机那边突然来了个100%全油门，嗡的一下汽车急加速到了60km/h，这时电脑又发出命令：刹车！结果乘客吐……</p><p>所以，在大多数场合中，用“开关量”来控制一个物理量就显得比较简单粗暴了，有时候是无法保持稳定的，因为单片机、传感器不是无限快的，采集、控制需要时间。</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213102443083.png" alt="image-20230213102443083"></p><p><strong>（1）Kp比例增益</strong></p><p>Kp比例控制考虑当前误差，误差值和一个正值的常数Kp（表示比例）相乘。需要控制的量，比如水温，有它现在的<strong>当前值</strong>，也有我们期望的<strong>目标值</strong>。</p><ul><li><p>当两者差距不大时，就让加热器“轻轻地”加热一下。</p></li><li><p>要是因为某些原因，温度降低了很多，就让加热器“稍稍用力”加热一下。</p></li><li><p>要是当前温度比目标温度低得多，就让加热器“开足马力”加热，尽快让水温到达目标附近。</p></li></ul><p>通俗的来讲就是P就是响应速度，例如，当烧水的时候，一开始是20℃，要加热到90℃，这个时候误差e=70℃，那么就要加大火力去让温度上升，当温度到达65℃，误差e=5℃，这个时候就不用这么大火力去烧水。</p><p>实际写程序时，就让偏差（目标减去当前）与调节装置的“调节力度”，建立一个一次函数的关系，就可以实现最基本的“比例”控制了~</p><p>Kp越大，调节作用越激进，Kp调小会让调节作用更保守。</p><p>但是，这个也有缺点，若只用“比例控制”的话，那么就无时无刻都会有误差，当e=0的时候，系统就不再控制了，这样整个系统就会来回震荡。若你正在制作一个平衡车，有了P的作用，你会发现，平衡车在平衡角度附近来回“狂抖”，比较难稳住。</p><p><strong>（2）Kd微分增益</strong></p><p>Kd微分控制考虑将来误差，计算误差的一阶导，并和一个正值的常数Kd相乘。（看的是趋势，也就是<strong>误差之差</strong>）</p><p>有了P的作用，不难发现，只有P好像不能让平衡车站起来，水温也控制得晃晃悠悠，好像整个系统不是特别稳定，总是在“抖动”。</p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213104225103.png" alt="image-20230213104225103"></p><p>设想有一个弹簧：现在在平衡位置上，拉它一下，然后松手，这时它会震荡起来，因为阻力很小，它可能会震荡很长时间，才会重新停在平衡位置。</p><p>请想象一下：要是把上图所示的系统浸没在水里，同样拉它一下 ：这种情况下，重新停在平衡位置的时间就短得多。</p><p>此时需要一个控制作用，让被控制的物理量的“变化速度”趋于0，即类似于“阻尼”的作用。</p><p>因为，当比较接近目标时，P的控制作用就比较小了，越接近目标，P的作用越温柔，有很多内在的或者外部的因素，使控制量发生小范围的摆动。</p><p>D的作用就是让物理量的速度趋于0，只要什么时候，这个量具有了速度，D就向相反的方向用力，尽力刹住这个变化。</p><p>Kd参数越大，向速度相反方向刹车的力道就越强，如果是平衡小车，加上P和D两种控制作用，如果参数调节合适，它应该可以站起来了。<br><strong>（3）Ki积分增益</strong></p><p>Ki积分控制考虑过去误差，将误差值过去一段时间和（误差和）乘以一个正值的常数Ki。</p><p>还是以热水为例，假如有个人把加热装置带到了非常冷的地方，开始烧水了，需要烧到50℃。</p><p>在P的作用下，水温慢慢升高，直到升高到45℃时，他发现了一个不好的事情：天气太冷，水散热的速度，和P控制的加热的速度相等了。</p><p><strong>这可怎么办？</strong></p><ul><li><p>P兄这样想：我和目标已经很近了，只需要轻轻加热就可以了。</p></li><li><p>D兄这样想：加热和散热相等，温度没有波动，我好像不用调整什么。</p></li><li><p>于是，水温永远地停留在45℃，永远到不了50℃。</p></li></ul><p>根据常识，我们知道，应该进一步增加加热的功率，可是增加多少该如何计算呢？</p><p>前辈科学家们想到的方法是真的巧妙，设置一个积分量，只要偏差存在，就不断地对偏差进行积分（累加），并反应在调节力度上。</p><p>这样一来，即使45℃和50℃相差不是太大，但是随着时间的推移，只要没达到目标温度，这个积分量就不断增加，系统就会慢慢意识到：还没有到达目标温度，该增加功率啦！</p><p>到了目标温度后，假设温度没有波动，积分值就不会再变动，这时，加热功率仍然等于散热功率，但是，温度是稳稳的50℃。</p><p>Ki的值越大，积分时乘的系数就越大，积分效果越明显，所以，I的作用就是，减小静态情况下的误差，让受控物理量尽可能接近目标值。</p><p><strong>I在使用时还有个问题：需要设定积分限制，防止在刚开始加热时，就把积分量积得太大，难以控制。</strong></p><h1 id="2、PID算法参数调试"><a href="#2、PID算法参数调试" class="headerlink" title="2、PID算法参数调试"></a>2、PID算法参数调试</h1><p>PID算法的参数调试是指通过调整控制参数（比例增益、积分增益/时间、微分增益/时间）<strong>让系统达到最佳的控制效果</strong>。</p><p>调试中稳定性（不会有发散性的震荡）是首要条件，此外，不同系统有不同的行为，不同的应用其需求也不同，而且这些需求还可能会互相冲突。</p><p><a href="https://rossning92.github.io/pid-simulation/">可以通过这个自己动手调节一下，看看结果如何🐧</a></p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105127774.png" alt="image-20230213105127774"></p><p>PID算法只有三个参数，在原理上容易说明，但PID算法参数调试是一个困难的工作，因为要符合一些特别的判据，而且PID控制有其限制存在。</p><p><strong>1、稳定性</strong></p><p>若PID算法控制器的参数未挑选妥当，其控制器输出可能是不稳定的，也就是其输出发散，过程中可能有震荡，也可能没有震荡，且其输出只受饱和或是机械损坏等原因所限制。不稳定一般是因为过大增益造成，特别是针对延迟时间很长的系统。</p><p>2、最佳性能</p><p>PID控制器的最佳性能可能和针对过程变化或是设定值变化有关，也会随应用而不同。</p><p>两个基本的需求是调整能力（regulation，干扰拒绝，使系统维持在设定值）及命令追随 （设定值变化下，控制器输出追随设定值的反应速度）。有关命令追随的一些判据包括有上升时间及整定时间。有些应用可能因为安全考量，不允许输出超过设定值，也有些应用要求在到达设定值过程中的能量可以最小化。</p><p><strong>3、各调试方法对比</strong></p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105526182.png" alt="image-20230213105526182"></p><p><strong>4、调整PID参数对系统的影响</strong> </p><p><img src="https://cdn.staticaly.com/gh/QM1412/blog_bed@main/img/image-20230213105552097.png" alt="image-20230213105552097"></p><p><strong>参考资料：</strong></p><p><a href="https://blog.csdn.net/m0_38106923/article/details/109545445?ops_request_misc=&request_id=&biz_id=102&utm_term=pid&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-109545445.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&spm=1018.2226.3001.4187"> 一文搞懂PID控制算法</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDI4MDE5Ng==&mid=2247488157&idx=2&sn=3b214c5ee27da1a0075b51d886b9f580&chksm=ebbbbf76dccc36603e441e89aca2f61ad22858c49756e51c601d213acd4778c1ff5b2b56fb0f&scene=21#wechat_redirect">PID原理和参数调试</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDA2OTM4MA==&mid=2459414238&idx=1&sn=82feaac579b491942e487c2e0622d5c9&chksm=fcdd1ab5cbaa93a3d14f96c221cc6883f113c4954f40fd34284eae8cec1cc893d6d482f3c91f&mpshare=1&scene=1&srcid=0924twXOIV8SKMcwY97lY428&sharer_sharetime=1600949251548&sharer_shareid=4c58b3600d67a71ab64a1eeb5ac2a392&key=6de1ce3c70b324a40741efe7e69941de25bb83453933cba79214d7f9d0c3e7abe41ac09f158ce2d42ddfe68d2f092a502ddec3f9634d7ca431a9c752b49846e6b54d4c3f516389f7fc0517e5a70da30396d98774a5b367d067d5622975378dbcbd9bf2cdd993f9c95452e721690a0e80d12b426b5f2186a5bf9ff971a551917d&ascene=1&uin=MTg5Mzg2MjgyOA==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Aejrx9ckEPq6didl4xP09gA=&pass_ticket=d7pYWgu6Wqd0XTmEgAxex08gu2s/z09DL17Lrry7UfvPpjphxapcAp4zmziElkpo&wx_header=0">谁曾想，听了个故事秒懂了PID！</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPIO输入以及C语言</title>
      <link href="/2023/01/12/2023-3-20/"/>
      <url>/2023/01/12/2023-3-20/</url>
      
        <content type="html"><![CDATA[<p>按键抖动：过滤，加一段延时<br><img src="/img/u.jpg"><br>若遇到电路中一端接电路，另一端接地的电容，考虑滤波电容的作用，使电路稳定，在电路分析的时候可以遮掉<br>传感器：红外发射管和接收管可以做寻迹小车<br><img src="/img/v.jpg"><br>左上角第一个：按键按下，接地低电平，按键松开，悬空电压不稳定，加个上拉电阻，则稳定PA0高电平<br>第二个图外接上拉电阻：可以想象上拉电阻为一个弹簧按键松开上拉高电平 按键按下接GND为无穷大的力低电平。PA0可以控制为浮空或者上拉，两个上拉高电平稳定低电平损耗<br>第三个内接下拉：同理第四个了解即可<br>C语言<br>数据类型<br><img src="/img/w.jpg"><br>Char字符按道理应该存放字符，但是单片机中用来存放整数<br>宏定义“#define”<br>用途：用一个字符代替一个数字，将数据参数映射到一个字符串上，<br><img src="/img/x.jpg"><br>关键字Typedef:<br>用途，将较长的变量类型换个名字，便于使用<br><img src="/img/1.jpg"><br>两者区别：<br>宏定义新名字在左边，不用分号；任何名字都能换<br>typedef新名字在右边，要分号；只能专门给变量类型换名字<br>给变量类型重命名一般用typedef<br>结构体：struct<br>用途：数据打包，不同类型变量的合集<br><img src="/img/2.jpg"><br>地址指针加-&gt;结构体名字<br>用结构体变量的名字，用.来引出结构体成员<br><img src="/img/3.jpg"><br>若名字太长结构体不方便<br><img src="/img/4.jpg"><br>此时可以用typedef<br><img src="/img/5.jpg"><br>到时候要再定义那个结构体直接用StructName替换一长串即可<br>枚举：enum<br>用途：定义一个取值受限制的整型变量，用于限制变量取值范围<br>比如定义一个变量用来存储星期的值，理论上1-7，定义一个整型变量，那么这个变量去什么数都可以不受到限制，这个时候出现数据不合法如星期八，则可以用枚举<br>定义和应用：<br>{Monday=1,Tuesday=2，Wednesday=3}week;如果数按顺序累加赋值可省略{Monday=1,Tuesday，Wednesday}week;<br><img src="/img/6.jpg"><br><img src="/img/7.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pilipala</title>
      <link href="/2023/01/12/pilipala/"/>
      <url>/2023/01/12/pilipala/</url>
      
        <content type="html"><![CDATA[<p>Today, my sister cooked a packet of turkey noodles, and I took a bite, which made me very hot.</p><p><img src="/img/f.jpg" alt="Duckling"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>happy day!</title>
      <link href="/2023/01/06/2023-1-16/"/>
      <url>/2023/01/06/2023-1-16/</url>
      
        <content type="html"><![CDATA[<h2 id="this-is-my-first-article"><a href="#this-is-my-first-article" class="headerlink" title="this is my first article"></a>this is my first article</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/04/hello-world/"/>
      <url>/2023/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
